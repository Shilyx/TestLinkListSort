/*
 *  @file  : LinkListSort.cpp
 *  @author: shilyx
 *  @date  : 2019-06-11 08:58:22.191
 *  @note  : Generated by SlxTemplates
 */

#include <stdio.h>
#include <conio.h>
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <ccomplex>
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <climits>
#include <clocale>
#include <cmath>
#include <complex>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <strstream>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

struct Node {
    int value;
    struct Node *next;
};

int RandomValue() {
    return rand() % 1000;
}

Node *CreateLinkList(int length) {
    Node *pHead = NULL;

    if (length <= 0) {
        return pHead;
    }

    Node *pTail = NULL;

    for (int i = 0; i < length; ++i) {
        Node *p = new Node;

        p->value = RandomValue();
        p->next = NULL;

        if (pHead == NULL) {
            pHead = p;
        }

        if (pTail == NULL) {
            pTail = p;
        } else {
            pTail->next = p;
            pTail = p;
        }
    }

    return pHead;
}

void DeleteLinkList(Node *p) {
    while (p) {
        Node *tmp = p;

        p = p->next;
        delete tmp;
    }
}

void DisplayLinkList(Node *p) {
    while (p) {
        cout << p->value << " ";
        p = p->next;
    }

    cout << endl;
}

Node *SortLinkList(Node *p) {
    if (p == NULL || p->next == NULL) {
        return p;
    }

    Node *pHead = NULL;
    Node *pOld = p;

    while (pOld) {
        Node *pOldFirst = pOld;
        pOld = pOld->next;

        // pOldFirst -> pHead
        pOldFirst->next = NULL;

        if (!pHead) {
            pHead = pOldFirst;
            continue;
        }

        if (pOldFirst->value <= pHead->value) {
            pOldFirst->next = pHead;
            pHead = pOldFirst;
            continue;
        }

        for (Node *pPos = pHead; pPos != NULL; pPos = pPos->next) {
            if (pPos->next == NULL) {
                pPos->next = pOldFirst;
                break;
            }

            if (pOldFirst->value <= pPos->next->value) {
                pOldFirst->next = pPos->next;
                pPos->next = pOldFirst;
                break;
            }
        }
    }

    return pHead;
}

std::list<int> LinkList2StdList(Node *p) {
    std::list<int> r;

    for (; p != NULL; p = p->next) {
        r.push_back(p->value);
    }

    return r;
}

bool LinkListEqStdList(Node *p, const std::list<int> &sl) {
    std::list<int>::const_iterator it = sl.begin();
    
    while (true) {
        if (it == sl.end() && p == NULL) {
            return true;
        }

        if (it == sl.end() || p == NULL) {
            return false;
        }

        if (*it != p->value) {
            return false;
        }

        ++it;
        p = p->next;
    }
}

int main(int argc, char *argv[])
{
    srand((unsigned int)time(NULL));

    for (int i = 0; i < 110; ++i) {
        cout << "-----------------------------" << endl;

        Node *p = CreateLinkList(rand() % 100);
        std::list<int> sl = LinkList2StdList(p);

        if (!LinkListEqStdList(p, sl)) {
            DisplayLinkList(p);
        } else {
            cout << "pass 1 ";
        }

        p = SortLinkList(p);
        sl.sort();

        if (!LinkListEqStdList(p, sl)) {
            DisplayLinkList(p);
        } else {
            cout << "pass 2 ";
        }

        DeleteLinkList(p);
        cout << endl;
    }

    return 0;
}